-- Table: dinewithme.eventinvitees

-- DROP TABLE dinewithme.eventinvitees;

CREATE TABLE dinewithme.eventinvitees
(
  eventid integer,
  inviteeid integer,
  CONSTRAINT eventinvitees_eventid_fkey FOREIGN KEY (eventid)
      REFERENCES dinewithme.events (eventid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT eventinvitees_inviteeid_fkey FOREIGN KEY (inviteeid)
      REFERENCES dinewithme.users (userid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE dinewithme.eventinvitees
  OWNER TO postgres;

  
  
  -- Table: dinewithme.events

-- DROP TABLE dinewithme.events;

CREATE TABLE dinewithme.events
(
  eventid integer NOT NULL DEFAULT nextval('dinewithme.event_eventid_seq'::regclass),
  name character varying(40),
  eventdate date,
  hostid integer,
  recipeid integer,
  CONSTRAINT event_pkey PRIMARY KEY (eventid),
  CONSTRAINT event_hostid_fkey FOREIGN KEY (hostid)
      REFERENCES dinewithme.users (userid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT event_recipeid_fkey FOREIGN KEY (recipeid)
      REFERENCES dinewithme.recipes (recipeid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE dinewithme.events
  OWNER TO postgres;

  
  
  -- Table: dinewithme.friends

-- DROP TABLE dinewithme.friends;

CREATE TABLE dinewithme.friends
(
  id bigserial NOT NULL,
  user1 integer,
  user2 integer,
  accepted boolean,
  CONSTRAINT friends_pkey PRIMARY KEY (id),
  CONSTRAINT friends_user1_fkey FOREIGN KEY (user1)
      REFERENCES dinewithme.users (userid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT friends_user2_fkey FOREIGN KEY (user2)
      REFERENCES dinewithme.users (userid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE dinewithme.friends
  OWNER TO postgres;

  
  
-- Table: dinewithme.recipes

-- DROP TABLE dinewithme.recipes;

CREATE TABLE dinewithme.recipes
(
  recipeid serial NOT NULL,
  name character varying(30),
  ingredients text,
  instructions text,
  CONSTRAINT recipes_pkey PRIMARY KEY (recipeid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE dinewithme.recipes
  OWNER TO postgres;

  -- Table: dinewithme.userrecipes

-- DROP TABLE dinewithme.userrecipes;

CREATE TABLE dinewithme.userrecipes
(
  id serial NOT NULL,
  userid integer,
  recipeid integer,
  CONSTRAINT userrecipes_pkey PRIMARY KEY (id),
  CONSTRAINT userrecipes_recipeid_fkey FOREIGN KEY (recipeid)
      REFERENCES dinewithme.recipes (recipeid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT userrecipes_userid_fkey FOREIGN KEY (userid)
      REFERENCES dinewithme.users (userid) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE dinewithme.userrecipes
  OWNER TO postgres;

  
  -- Table: dinewithme.users

-- DROP TABLE dinewithme.users;

CREATE TABLE dinewithme.users
(
  userid serial NOT NULL,
  username character varying(40),
  firstname character varying(40),
  lastname character varying(40),
  password character varying(60),
  CONSTRAINT users_pkey PRIMARY KEY (userid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE dinewithme.users
  OWNER TO postgres;
